#####################################################################
#  User readout list using a TI (pipeline) in MASTER mode
#  With an SFI in a Fastbus crate... readout of an Lecroy 1881 ADC.
#
#  Bryan Moffit, TJNAF 2014
#####################################################################


readout list GEN_USER
#maximum 20000,6000
maximum 4096,512
sfi readout

const WC_MASK = hex ffffff
const SFI_ADDR  = hex e00000
const IRQ_SOURCE_MASK = 0x02

const NADC = 7
const ADCSLOT1 = 10
const ADCSLOT2 = 11
const ADCSLOT3 = 12
const ADCSLOT4 = 13 
const ADCSLOT5 = 14
const ADCSLOT6 = 15
const ADCSLOT7 = 16

include "sfi.h"
include "GEN_source.h"
include "tiLib.h"

variable scan_mask

# A24 Address for TI Module (e.g. Slot number = 2)
const TRIG_ADDR = 0x080000
# TRIG_MODE=0 for interrupt mode (External input)
const TRIG_MODE = 0

const BLOCKLEVEL=1
const BUFFERLEVEL=1

# (1) Use internal pulser as the trigger, otherwise use TSINPUTS
const USE_PULSER=0

# Decision on whether (1) or not (0) to readout TI
const READOUT_TI=1

int adcslots[NADC];
int modslots[NADC];
int nhitmod[NADC];
int csr0[NADC];

//static int pedsup;
static int buffered;
static int phelicity;

extern int bigendian_out;
int blockLevel=1;
extern int tiA32Base;

############################################################
# DOWNLOAD
############################################################
begin download

variable res, laddr, jj, kk

# When sending to a Linux Host set bigendian_out = 0
bigendian_out = 0;

# Setup SFI pointers to Enable triggers, and establish
# DMA address offsets
%%
  res = (unsigned long) sysBusToLocalAdrs(0x39,SFI_ADDR,&laddr);
  if (res != 0) {
     printf("Error Initializing SFI res=%d \n",res);
  } else {
     printf("Calling InitSFI() routine with laddr=0x%x.\n",laddr);
     InitSFI(laddr);
  }
%%

# Setup TI
%%
{
  /* measured longest fiber length */
  tiSetFiberLatencyOffset_preInit(0x40); 

  /* Set crate ID */
  tiSetCrateID_preInit(0x1); /* ROC 1 */

  /* TI Setup */
  tiInit(TRIG_ADDR,TRIG_MODE,0);
  tiDisableBusError();

  if(READOUT_TI==0) /* Disable data readout */
    {
      tiDisableDataReadout();

      /* Disable A32... where that data would have been stored on the TI */
      tiDisableA32();
    }
  
  /* Override library default busy source */
  tiSetBusySource(TI_BUSY_LOOPBACK,1);

  if(USE_PULSER==1)
    tiSetTriggerSource(TI_TRIGGER_PULSER);
  else
    tiSetTriggerSource(TI_TRIGGER_TSINPUTS);


  /* Set needed TS input bits */
  tiEnableTSInput( TI_TSINPUT_1 | TI_TSINPUT_2 );

  /* Load the trigger table
   *  - 0:
   *    - TS#1,2,3,4,5 generates Trigger1 (physics trigger),
   *    - TS#6 generates Trigger2 (playback trigger),
   *    - No SyncEvent;
   */
  tiLoadTriggerTable(0);

  tiSetTriggerHoldoff(1,10,0);
  tiSetTriggerHoldoff(2,10,0);

  tiSetBlockBufferLevel(BUFFERLEVEL);
  tiStatus(0);
}
%%

%%
  init_strings();
 /* buffered=getflag(BUFFERED);*/
  buffered=0;	
  phelicity=0;

  /* setup the arrays containing the slotnumbers */ 
  if (NADC>0) {
    kk=0;
    for(jj=ADCSLOT1;jj<=ADCSLOT7;jj++) {
       adcslots[kk]=jj;
       modslots[kk]=jj;
       csr0[kk]=0x400;
       kk++;
     }
  }

 
/* calculate the scan_mask */
  scan_mask = 0;

  for (jj=0; jj<NADC; jj++)
     scan_mask |= (1<<modslots[jj]);
  printf ("Crate Scan mask = %x\n",scan_mask);
%%


  log inform "User Download Executed"

end download
    
############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id, kk, slot_num, csr_0, pedsuppress, tslot
  
  adc_id=0
  pedsuppress=0;

  log inform "Entering User Prestart"

  init trig source GEN
  link async trig source GEN 1 to titrig and titrig_done
  event type 1 then read GEN 1

%%
{ 
 /* Turn VXS signals on, beginning of prestart */
  tiEnableVXSSignals();

  /* Set number of events per block (broadcasted to all connected TI Slaves)*/
  tiSetBlockLevel(BLOCKLEVEL);
  printf("rocPrestart: Block Level set to %d\n",BLOCKLEVEL);
}
%%
  # For Interrupt driven triggers
  sfiTrigSource = IRQ_SOURCE_MASK;

  reset crate 0

  # Reset all ADC's
  write hex 40000000 into geographic control ADCSLOT1
  write hex 40000000 into geographic control ADCSLOT2
  write hex 40000000 into geographic control ADCSLOT3
  write hex 40000000 into geographic control ADCSLOT4
  write hex 40000000 into geographic control ADCSLOT5
  write hex 40000000 into geographic control ADCSLOT6
  write hex 40000000 into geographic control ADCSLOT7
  sfi_error_decode(0);

  # 2nd address 1: Sparcification mode (4xxxxxxx) or not (0xxxxxxx)
  # ADCSLOTN is primary link of multiblock readout, ADCSLOT1 is end, rest is middle
  # The differences is in 0904 (primary), 1904 (middle), and 1104 (end) for CSR.
  # Origin of gate:  for secondary address 1 programming, last 2 bits:
  # if = 1, from front panel
  # if = 3, from TR6 lines
  # 12 bit is hex 40000083 and 13 bit ( when it works... ) hex 40000043

  geographic control ADCSLOT7
    write hex 00000904
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);
  

  geographic control ADCSLOT6
    write hex 00001904
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);
 
  geographic control ADCSLOT5
    write hex 00001904
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);

  geographic control ADCSLOT4
    write hex 00001904
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);

  geographic control ADCSLOT3
    write hex 00001904
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);
  
 geographic control ADCSLOT2
    write hex 00001904
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);

geographic control ADCSLOT1
    write hex 00001104
  secondary address 1
    write hex 00000043
  secondary address 7
     write 2
  release
  sfi_error_decode(0);

%%
{
  /* Send a SyncReset, at the end of prestart */
  tiSyncReset(1);
  taskDelay(2);
}
%%


  log inform "User Prestart Executed"
end prestart

############################################################
# END
############################################################
begin end
%%
{
  CDODISABLE(GEN,1,0);

  if(USE_PULSER==1)
    tiSoftTrig(1,0,0x1123,1);

  tiStatus(0);
  printf("Interrupt Count: %8d \n",tiGetIntCount());
}
%%
  log inform "User End Executed"
end end

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);
  log inform "User Pause Executed"

end pause

############################################################
# GO
############################################################
begin go
 
 log inform "Entering User Go TEST"
  
%%
{
 
  if(USE_PULSER==1)
    tiSoftTrig(1,3000,0x1123,1);

  tiStatus(0);
 
  CDOENABLE(GEN,1,0);
}
%%
  log inform "User Go Executed TEST"
end go

############################################################
# TRIGGER
############################################################
  begin trigger titrig
 
  variable ii, jj, datascan,event_ty
  variable sync_or_unbuff
  variable itimeout, icnt
  variable temp_var

   # Enable SFI Sequencer
  *sfi.sequencerEnable = 0;

  sync_or_unbuff = syncFlag || !buffered;

  rol->dabufp = (long *) 0;
  
  open event type 1 of BT_UI4
  
  output 0x0da00ddc4

  # Execute Sparse Data Scan to determine if there is valid Data */
  ii=0
  datascan = 0
  while (ii<100)and (scan_mask != (datascan&scan_mask))
    read from broadcast control 9 into datascan
    increment ii
  end while

  if ii is less than 100 then

  # Load next event -- broadcast
  # For ADCs
    padr = 0x15;
    fb_fwcm_1(0x15,0,0x400,1,0,1,0,0,0);

  # Multiblock readout for the ADCs  
  block read 800 from geo data ADCSLOT7
  else 
   output hex dc0000ff

%%
  for (jj=0;jj<=NADC;jj++) {
     if(datascan & (1<<adcslots[jj])) {
       padr=adcslots[jj];
       fb_fwc_1(padr,0,0x400,1,1,0,1,0,0,0);
     }
   }

%%
  endif

# Output number of triggers and timeout counter.
# fabc000N = header for fastbus counter (fabc)
# N = number of words that follow.

   output 0xfabc000a
   icnt = icnt + 1;
   if(icnt > 20000) icnt = 0;
   *rol->dabufp++ = icnt;
   output ii
   output datascan
#
   output 0xfabc000b


%%
/* Words to flag if buffered/unbuffered */
   if (buffered) { 
        *rol->dabufp++ = 0xfafbbf00 + syncFlag;
     }
      else 
     {
        *rol->dabufp++ = 0xfabb0000;
     } 
/* Word to flag the helicity mode (superperiod or not) */
   if (phelicity) { 
        *rol->dabufp++ = 0xdfab0000;
     }           

%%

# Check for extra hits, keep reading the modules with hits
# until cleared, and put the number of extra hits into datastream.

%%
    for(ii=0;ii<NADC;ii++) {
      nhitmod[ii]=0;
    }
%%

  if sync_or_unbuff is not equal to 0 then
  itimeout=0;
%%
    do {
      if(itimeout++>10000) break;
      datascan = 0;
      padr = 9;
      fb_frcm_1(9,0,&datascan,1,0,1,0,0,0);
      if(datascan & scan_mask) {
        for(ii=0;ii<NADC;ii++){
          if(datascan & (1<<modslots[ii])) {
            nhitmod[ii]++;
            padr = modslots[ii];
            fb_fwc_1(padr,0,csr0[ii],1,1,0,1,0,0,0);
          }
        }
      }
    } while(datascan & scan_mask);
%%
    ii = 0
    while ii is less than NADC
      temp_var = nhitmod[ii];
      if temp_var is not equal to 0 then
        datascan = 0xdcfe0000 + (modslots[ii] << 11) + (nhitmod[ii] & 0x7ff);
        output datascan   
      end if
      increment ii
    end while
  end if
    
close event

end trigger

begin done titrig
%%
  sysBusIntAck(5);       /* Acknowledge Universe chip */
%%
end done

############################################################
# DONE (TRIGGER ACKNOWLEDGE)
############################################################
begin done
  
# Acknowledge B42 Interrupt
  CDOACK(GEN,1,0);

end done

begin status

end status
